import com.bmuschko.gradle.docker.tasks.image.*
import org.springframework.boot.gradle.plugin.SpringBootPlugin

//编译构建时的配置
buildscript {
    ext {
        shellFile = "/_docs/shells/linux/start_.sh"      // start 脚本
        remoteDir = "/root/project/jiu"                 //linux 存放包路径
        profiles = "dev"                               //模式
        opt = "-server -Xms64M -Xmx64M -Xss512k -XX:MetaspaceSize=64M -XX:MaxMetaspaceSize=64M -XX:+UseG1GC"    //环境变量
        springCloudVersion = "Hoxton.SR3"           //springcloud 版本
        springCloudAlibaba = "2.2.1.RELEASE"      //springcloud 阿里巴巴 版本
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/jcenter"}
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://mvnrepository.com/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
        mavenCentral()
        jcenter()
    }

}
plugins {
    id "com.bmuschko.docker-java-application" version "3.3.6"       //通过其远程API管理Docker镜像和容器.
    id "com.bmuschko.docker-remote-api" version "3.3.6"             //Gradle插件,通过其远程API管理Docker镜像和容器.
    id "org.hidetake.ssh" version "2.6.0"                           // ssh 链接工具
    id 'org.springframework.boot' version '2.2.5.RELEASE'          //spring提供的spring boot插件,主要用到了其依赖管理的功能.
    id "com.gradle.build-scan" version "1.8"                       //生成构建分析数据.
}
allprojects {
    group = "com.jiu" //分组
    version = "1.0.0" //版本号
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/jcenter"}
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://mvnrepository.com/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
        mavenCentral()
        jcenter()
    }
    
}
//子項目插件管理
subprojects {
    apply plugin: 'org.hidetake.ssh'   //ssh插件
    apply plugin: "java"   //java插件
    apply plugin: "idea"   //IDEA插件
    apply plugin: "maven"  //maven插件
    apply plugin: 'eclipse' //eclipse插件
    apply plugin: "io.spring.dependency-management"  //实现maven的依赖统一管理功能
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'com.bmuschko.docker-java-application'
    if (!name.contains("croe") && !name.contains("generator")) {
        apply plugin: "org.springframework.boot"   //spring boot 插件
        apply plugin: 'application'   //springboot
        apply plugin: 'distribution'  //编译出运行脚本
    }
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    //指定编码格式
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}

//子項版本控制
subprojects {
    //版本管理
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibaba}"
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
        dependencies {
            dependency "com.alibaba.nacos:nacos-client:1.3.0"
            dependency "org.projectlombok:lombok:1.16.18"
            dependency "com.google.guava:guava:28.0-jre"
            dependency "commons-beanutils:commons-beanutils:1.9.3"
            dependency "cn.hutool:hutool-all:5.4.2"
            dependency "org.lionsoul:ip2region:1.7"
            dependency "com.github.xiaoymin:knife4j-spring-boot-starter:2.0.2"
            dependency "net.sf.ehcache:ehcache:2.10.4"
            dependency "com.lmax:disruptor:3.3.6"
            dependency "commons-io:commons-io:2.4"
            dependency "org.apache.commons:commons-lang:3.10"
            dependency "commons-codec:commons-codec:1.11"
            dependency "com.alibaba:fastjson:1.2.62"
            dependency "io.springfox:springfox-swagger2:2.9.2"
            dependency "io.seata:seata-all:1.0.0"
            dependency "p6spy:p6spy:3.9.1"
            dependency "cn.hutool:hutool-core:5.4.2"
            dependency "org.hibernate.validator:hibernate-validator:6.0.13.Final"
            dependency 'cn.afterturn:easypoi-annotation:4.1.3'
            dependency 'cn.afterturn:easypoi-base:4.1.3'
            dependency 'cn.afterturn:easypoi:4.1.3'
            dependency group: 'net.oschina.j2cache', name: 'j2cache-core', version: '2.8.2-release'
            dependency 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
            dependency 'org.apache.maven.shared:maven-invoker:3.0.1'
            dependency "org.apache.httpcomponents:httpclient:4.5.6"
            dependency "org.apache.httpcomponents:httpcore:4.4.11"
            dependency 'com.xuxueli:xxl-rpc-core:1.2.1'
            dependency 'org.quartz-scheduler:quartz:2.2.3'
            dependency 'org.apache.commons:commons-email:1.5'
            dependency 'org.codehaus.groovy:groovy:3.0.3'
            dependency 'org.apache.commons:commons-exec:1.3'
            dependency group: 'com.github.dozermapper', name: 'dozer-core', version: '6.5.0'
            dependency group: 'com.github.dozermapper', name: 'dozer-spring4', version: '6.5.0'
            dependencySet(group: 'io.jsonwebtoken', version: '0.11.2') {
                entry 'jjwt-jackson'
                entry 'jjwt-impl'
                entry 'jjwt-api'
            }
            dependencySet(group: 'com.baomidou', version: '3.4.0') {
                entry 'mybatis-plus-core'
                entry 'mybatis-plus-annotation'
                entry 'mybatis-plus'
                entry 'mybatis-plus-boot-starter'
                entry 'mybatis-plus-generator'
            }
            dependencySet(group: 'com.plumelog', version: '2.2.2') {
                entry 'plumelog-logback'
                entry 'plumelog-trace'
            }
        }
    }
}
//子項目打包控制
subprojects {
    if (!project.name.contains("croe") && !name.contains("generator")) {
        applicationDefaultJvmArgs = ['-Xms64m', '-Xmx64m']
        jar {
            enabled true
        }
        //配置文件转移
        applicationDistribution.from("src/main/resources") {
            include 'application*.properties'
            include 'bootstrap.yml'
            into 'config'
        }
        /**
         * 生成启动脚本
         */
        startScripts() {
            doFirst {
                unixStartScriptGenerator.template = resources.text.fromFile(
                        project.getRootDir().getAbsolutePath() + "/_docs/shells/linux/unixStartScript.txt"
                )
                windowsStartScriptGenerator.template = resources.text.fromFile(
                        project.getRootDir().getAbsolutePath() + "/_docs/shells/windows/windowsStartScript.txt"
                )
            }
        }
        clean.doFirst {
            delete "${buildDir}/../out"
            delete rootProject.buildDir.getPath() + "/distributions"
            delete project.getRootDir().getAbsolutePath() + "/catalina.base_IS_UNDEFINED"
            delete rootProject.buildDir.getPath()
        }
        build.doLast {
            copy {
                from buildDir.getPath() + "/distributions" into rootProject.buildDir.getPath() + "/distributions"
            }
           // dependsOn  remoteDeploy
        }
    }
}

//发布至linux 服务器
subprojects {
    ssh.settings {
        knownHosts = allowAnyHosts
    }
    remotes {
        deployServer {
            host = 'budongi.club'
            user = 'root'
            password = 'www.5211314.com'
//          identity = file('id_rsa')  证书链接
        }
    }
    if (!project.name.contains("croe") && !name.contains("generator")) {
        task remoteDeploy(dependsOn: [clean, bootJar]) {
            bootJar.mustRunAfter clean
            doLast {
                ssh.run {
                    session(remotes.deployServer) {
                        def runJars = project.name + "-" + version + ".jar"
                        println '>>> start copying   ' + runJars + '  ...'
                        //copy jar 包
                        //   put from: "${buildDir}/libs/${runJars}", into: "${remoteDir}"
                        println '>>> start app   ' + runJars + '  ...'
                        execute resources.text.fromFile(project.getRootDir().getAbsolutePath() + shellFile).asString().replace(runJarsPlaceHolder, runJars).replace(optPlaceHolder, opt).replace(profilesPlaceHolder, profiles).replace(remoteDirPlaceHolder, remoteDir).replace("\r", "")
                        println '>>> remote deploy OK...'
                    }
                }
            }
        }
    }
}

//子項目docker 打包控制
subprojects {
    //docker  远程仓库
    docker {
        registryCredentials {
            url = 'tcp://127.0.0.1:2371'
        }
    }
    if (!project.name.contains("croe") && !name.contains("generator")) {
        // Dockerfile文件存放地址
        String dockerFileDir = 'build/docker'

        //docker文件
        String dockFilePath = "${dockerFileDir}/Dockerfile"


        /**
         * 创建Dockerfile文件.
         */
        task createDockerfile(type: Dockerfile) {
            //指定脚本分组
            group = "docker"
            //脚本依赖 build任务
            dependsOn bootJar
            //指定生成的Dockerfile所处的位置.
            destFile = project.file(dockFilePath)
            //指定依赖的基础镜像
            from 'openjdk:8-jdk-alpine'
            //指定挂载目录
            volume "/tmp"
            //扩展标签
            label(['author': 'Rex', 'email': 'budongil.club'])
            //添加参数
            arg "JAR_FILE"
//            runCommand "cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
//                && echo 'Asia/Shanghai' > /etc/timezone"
            runCommand  "apk add --update font-adobe-100dpi ttf-dejavu fontconfig"
            //编译时将jar包保存进去
            copyFile('${JAR_FILE}', "app.jar")
            defaultCommand("--spring.profiles.active=docker")
            //指定脚本执行命令
            entryPoint("java","-Xmx128m", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar")
        }
        /**
         * 构建基础镜像
         */
        task image(type: DockerBuildImage) {
            group = 'docker'
            dependsOn createDockerfile
            //指定Dockerfile文件
            inputDir = project.file("build/docker")
            dockerFile = project.file(dockFilePath)
            //标签
            tag = "${project.group}/${project.name.replaceAll('_',"")}:${project.version}"
            //指定在执行build命令时,使用的构建参数.
            buildArgs = ["JAR_FILE": "${bootJar.archiveName}"]
            /**
             * 在构建容器前,将jar包和Dockerfile放置到同一目录下.
             */
            doFirst {
                copy {
                    from bootJar
                    into "${project.buildDir}/docker"
                }
            }
        }
    }
}
/**
 * 生成gradlew文件,统一gradle版本,避免因为版本不同产生的问题
 */
task wrapper(type: Wrapper) {
    gradleVersion = "5.1.1"
}
/**
 * 生成构建分析报告.
 */
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    //授权
    licenseAgree = 'yes'
}


