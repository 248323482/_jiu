
//编译构建时的配置
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://mvnrepository.com/" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
        jcenter()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"


    }

}




allprojects {
    group = 'com.jiu' //分组
    version = '1.0' //版本号
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
}
//统一所有子项目的配置
subprojects {
    ext {
        springBootVersion='2.0.5.RELEASE'
        mysqlConnectorVersion = '5.1.44'
        gradleDockerVersion = '1.2'
        ehcacheVersion = '2.10.4'
        mysqlConnectorVersion = '5.1.44'
        lombokVersion = '1.16.18'
        mybatisVersion = '3.4.5'
        mybatisStarterVersion = '1.3.0'
        hikariCPVersion = '2.5.1'
        commonMapperVersion = '3.4.4'
        commonsIOVersion = '2.4'
        commonsLangversion = '3.7'
        commonsCodecVersion = '1.11'
        fastJsonVersion = '1.2.41'
        swagger2Version='2.9.2'
    }

    apply plugin: 'io.spring.dependency-management'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    build.doLast {
        def rootPath = rootProject.buildDir.getPath() + "/distributions"
        copy {
            from buildDir.getPath() + "/distributions" into rootPath
        }
    }
    clean.doFirst {
        delete "${buildDir}/../out"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://mvnrepository.com/" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://repo.spring.io/release" }
        jcenter()
    }
    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-config:2.0.0.M8'
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Finchley.SR1"
        }
    }

    jar {
        manifest.attributes provider: 'gradle'
    }




    dependencies {

        //web
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}"){
            //使用undertow来代替tomacat
            exclude module:"spring-boot-starter-tomcat"
        }
        //替代tomcat
        compile 'org.springframework.boot:spring-boot-starter-undertow'

        //模板引擎
     //   compile("org.springframework.boot:spring-boot-starter-freemarker:${springBootVersion}")

        //缓存
        compile("net.sf.ehcache:ehcache:${ehcacheVersion}")

        //数据库驱动
        compile("mysql:mysql-connector-java:${mysqlConnectorVersion}")

        //连接池
        compile("com.zaxxer:HikariCP:${hikariCPVersion}")

        //ORM
        compile("org.mybatis:mybatis:${mybatisVersion}")

        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisStarterVersion}")

        //lombok插件
        compile("org.projectlombok:lombok:${lombokVersion}")

        //
        compile 'com.lmax:disruptor:3.3.6'

        //common mapper
        compile("tk.mybatis:mapper:${commonMapperVersion}")
        //热部署
        compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
        //commons-io
        compile("commons-io:commons-io:${commonsIOVersion}")

        //commons-lang3
        compile("org.apache.commons:commons-lang3:${commonsLangversion}")

        //commons-codec
        compile("commons-codec:commons-codec:${commonsCodecVersion}")

        //fast-json
        compile("com.alibaba:fastjson:${fastJsonVersion}")
        //thymeleft
        compile("org.springframework.boot:spring-boot-starter-thymeleaf")
        // 关闭thymeleft强校验
        compile("net.sourceforge.nekohtml:nekohtml:1.9.22")
        //swagger2
        compile("io.springfox:springfox-swagger2:${swagger2Version}")
        compile("com.alibaba:druid:1.0.15")
        //httpclient
        compile("org.apache.httpcomponents:httpclient:4.5.6")
        compile("org.apache.httpcomponents:httpcore:4.4.11")
        //测试
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")





    }






}














